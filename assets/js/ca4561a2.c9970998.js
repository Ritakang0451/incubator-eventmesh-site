"use strict";(self.webpackChunkincubator_eventmesh_site=self.webpackChunkincubator_eventmesh_site||[]).push([[3250],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},372:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],l={},o="Unit Test Requirement",u={unversionedId:"contribute/write-unit-test",id:"contribute/write-unit-test",title:"Unit Test Requirement",description:"- Each unit test case should use assertions instead of System.out output or if statement",source:"@site/docs/contribute/02-write-unit-test.md",sourceDirName:"contribute",slug:"/contribute/write-unit-test",permalink:"/docs/contribute/write-unit-test",draft:!1,editUrl:"https://github.com/apache/incubator-eventmesh-site/edit/master/docs/contribute/02-write-unit-test.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Release Creation Process",permalink:"/docs/contribute/release"},next:{title:"New Contributor Guidelines",permalink:"/docs/contribute/new-contributor-guidelines"}},c={},d=[{value:"Location and Naming Rules",id:"location-and-naming-rules",level:2},{value:"Assertion Usage",id:"assertion-usage",level:2},{value:"Common Assertion",id:"common-assertion",level:3},{value:"Example",id:"example",level:3},{value:"<code>assertEquals()</code>",id:"assertequals",level:4},{value:"<code>assertTrue()</code>",id:"asserttrue",level:4},{value:"<code>assertFalse()</code>",id:"assertfalse",level:4},{value:"<code>assertNull()</code>",id:"assertnull",level:4},{value:"<code>assertNotNull()</code>",id:"assertnotnull",level:4}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-test-requirement"},"Unit Test Requirement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each unit test case should use assertions instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"System.out")," output or ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," statement"),(0,i.kt)("li",{parentName:"ul"},"Each unit test case shouldn't call other cases or depend on the order of execution."),(0,i.kt)("li",{parentName:"ul"},"Each unit test case should be repeatable and not depend on the external environment because the test might be executed in the continuous integration."),(0,i.kt)("li",{parentName:"ul"},"The scope of each unit test should be small enough to help locate the problem at the method level.")),(0,i.kt)("h2",{id:"location-and-naming-rules"},"Location and Naming Rules"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The unit test should be placed in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/test/java"),"."),(0,i.kt)("li",{parentName:"ul"},"The unit test configuration file should be placed in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/test/resources"),". For example:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Class to be tested: ",(0,i.kt)("inlineCode",{parentName:"li"},"src/main/java/org/apache/eventmesh/common/protocol/http/body/BaseResponseBody.java")),(0,i.kt)("li",{parentName:"ul"},"Unit test: ",(0,i.kt)("inlineCode",{parentName:"li"},"src/test/java/org/apache/eventmesh/common/protocol/http/body/BaseResponseBodyTest.java")),(0,i.kt)("li",{parentName:"ul"},"Unit test configuration: ",(0,i.kt)("inlineCode",{parentName:"li"},"src/test/resources/configuration.properties")))),(0,i.kt)("li",{parentName:"ul"},"The package name of the unit test class should be identical to the class to be tested."),(0,i.kt)("li",{parentName:"ul"},"The name of the unit test class should be ",(0,i.kt)("inlineCode",{parentName:"li"},"{class or interface to be tested}Test"),". For example:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Class to be tested: ",(0,i.kt)("inlineCode",{parentName:"li"},"EventMeshUtil")),(0,i.kt)("li",{parentName:"ul"},"Unit test class: ",(0,i.kt)("inlineCode",{parentName:"li"},"EventMeshUtilTest")))),(0,i.kt)("li",{parentName:"ul"},"The name of each test case should be ",(0,i.kt)("inlineCode",{parentName:"li"},"test{method name}"),". For example:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Method to be tested: ",(0,i.kt)("inlineCode",{parentName:"li"},"addProp(String key, String val)")),(0,i.kt)("li",{parentName:"ul"},"Unit test case: ",(0,i.kt)("inlineCode",{parentName:"li"},"testAddProp"))))),(0,i.kt)("h2",{id:"assertion-usage"},"Assertion Usage"),(0,i.kt)("h3",{id:"common-assertion"},"Common Assertion"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Methods"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Instructions"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertEquals")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether two objects or primitive types are equal")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertNotEquals")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether two objects or primitive types are not equal")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertTrue")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether the given Boolean value is ",(0,i.kt)("inlineCode",{parentName:"td"},"true"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertFalse")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether the given Boolean value is ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertNull")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether the given object reference is ",(0,i.kt)("inlineCode",{parentName:"td"},"null"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertNotNull")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Determines whether the given object reference is not ",(0,i.kt)("inlineCode",{parentName:"td"},"null"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"assertAll")),(0,i.kt)("td",{parentName:"tr",align:"left"},"When multiple decision logic are processed together if only one error is reported, the whole test will fail")))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("h4",{id:"assertequals"},(0,i.kt)("inlineCode",{parentName:"h4"},"assertEquals()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'configuration.init();\nAssert.assertEquals("value1", configuration.eventMeshEnv);\n')),(0,i.kt)("h4",{id:"asserttrue"},(0,i.kt)("inlineCode",{parentName:"h4"},"assertTrue()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'BaseResponseHeader header = BaseResponseHeader.buildHeader("200");\nAssert.assertTrue(header.toMap().containsKey(ProtocolKey.REQUEST_CODE));\n')),(0,i.kt)("h4",{id:"assertfalse"},(0,i.kt)("inlineCode",{parentName:"h4"},"assertFalse()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Class<NacosRegistryService> nacosRegistryServiceClass = NacosRegistryService.class;\nField initStatus = nacosRegistryServiceClass.getDeclaredField("INIT_STATUS");\ninitStatus.setAccessible(true);\nObject initStatusField = initStatus.get(nacosRegistryService);\nAssert.assertFalse((Boolean.parseBoolean(initStatusField.toString())));\n')),(0,i.kt)("h4",{id:"assertnull"},(0,i.kt)("inlineCode",{parentName:"h4"},"assertNull()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"DefaultFullHttpResponse response = httpCommand.httpResponse();\nAssert.assertNull(response);\n")),(0,i.kt)("h4",{id:"assertnotnull"},(0,i.kt)("inlineCode",{parentName:"h4"},"assertNotNull()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Codec.Decoder cd = new Codec.Decoder();\nArrayList<Object> result = new ArrayList<>();\ncd.decode(null, buf, result);\nAssert.assertNotNull(result.get(0));\n")))}m.isMDXComponent=!0}}]);