"use strict";(self.webpackChunkincubator_eventmesh_site=self.webpackChunkincubator_eventmesh_site||[]).push([[5525],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1584:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="EventMesh Runtime (Docker)",c={unversionedId:"installation/runtime-with-docker",id:"installation/runtime-with-docker",title:"EventMesh Runtime (Docker)",description:"The documentation introduces the steps to install the latest release of EventMesh Runtime with Docker and connect to Apache RocketMQ. It's recommended to use a Linux-based system with Docker Engine. Please follow the Docker tutorial to get familiar with the basic concepts (registry, volume, etc.) and commands of Docker.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/installation/02-runtime-with-docker.md",sourceDirName:"installation",slug:"/installation/runtime-with-docker",permalink:"/zh/docs/installation/runtime-with-docker",draft:!1,editUrl:"https://github.com/apache/incubator-eventmesh-site/edit/master/docs/installation/02-runtime-with-docker.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EventMesh Runtime",permalink:"/zh/docs/installation/runtime"},next:{title:"EventMesh Store",permalink:"/zh/docs/installation/store"}},p={},m=[{value:"Pull EventMesh Image",id:"pull-eventmesh-image",level:2},{value:"Edit Configuration",id:"edit-configuration",level:2},{value:"<code>eventmesh.properties</code>",id:"eventmeshproperties",level:3},{value:"<code>rocketmq-client.properties</code>",id:"rocketmq-clientproperties",level:3},{value:"Run and Manage EventMesh Container",id:"run-and-manage-eventmesh-container",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"eventmesh-runtime-docker"},"EventMesh Runtime (Docker)"),(0,o.kt)("p",null,"The documentation introduces the steps to install the latest release of EventMesh Runtime with Docker and connect to Apache RocketMQ. It's recommended to use a Linux-based system with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/"},"Docker Engine"),". Please follow the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/"},"Docker tutorial")," to get familiar with the basic concepts (registry, volume, etc.) and commands of Docker."),(0,o.kt)("h2",{id:"pull-eventmesh-image"},"Pull EventMesh Image"),(0,o.kt)("p",null,"Download the pre-built image of ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/eventmesh/eventmesh"},(0,o.kt)("inlineCode",{parentName:"a"},"eventmesh"))," from Docker Hub with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker pull"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ sudo docker pull eventmesh/eventmesh:v1.4.0\nv1.4.0: Pulling from eventmesh/eventmesh\n2d473b07cdd5: Pull complete\n2b97b2e51c1a: Pull complete\nccef593d4fe7: Pull complete\n70beb7ae51cd: Pull complete\n0a2cf32321af: Pull complete\n5d764ea8950d: Pull complete\nd97f44e8825f: Pull complete\nDigest: sha256:0edc758be313c61758c1b598ef3315e3b6f707b127ad649063caf67d8876cc45\nStatus: Downloaded newer image for eventmesh/eventmesh:v1.4.0\ndocker.io/eventmesh/eventmesh:v1.4.0\n")),(0,o.kt)("p",null,"To verify that the ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh/eventmesh")," image is successfully installed, list the downloaded images with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker images"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ sudo docker images\neventmesh/eventmesh           v1.4.0    6e2964599c78   2 weeks ago    937MB\n")),(0,o.kt)("h2",{id:"edit-configuration"},"Edit Configuration"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh.properties")," to change the configuration (e.g. TCP port, client blacklist) of EventMesh Runtime. To integrate RocketMQ as a connector, these two configuration files should be created: ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh.properties")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rocketmq-client.properties"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo mkdir -p /data/eventmesh/rocketmq/conf\ncd /data/eventmesh/rocketmq/conf\nsudo touch eventmesh.properties\nsudo touch rocketmq-client.properties\n")),(0,o.kt)("h3",{id:"eventmeshproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"eventmesh.properties")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh.properties")," file contains the properties of EventMesh runtime environment and integrated plugins. Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-eventmesh/blob/master/eventmesh-runtime/conf/eventmesh.properties"},"default configuration file")," for the available configuration keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo vim eventmesh.properties\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Configuration Key"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"eventMesh.server.http.port")),(0,o.kt)("td",{parentName:"tr",align:null},"10105"),(0,o.kt)("td",{parentName:"tr",align:null},"EventMesh HTTP server port")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"eventMesh.server.tcp.port")),(0,o.kt)("td",{parentName:"tr",align:null},"10000"),(0,o.kt)("td",{parentName:"tr",align:null},"EventMesh TCP server port")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"eventMesh.server.grpc.port")),(0,o.kt)("td",{parentName:"tr",align:null},"10205"),(0,o.kt)("td",{parentName:"tr",align:null},"EventMesh gRPC server port")))),(0,o.kt)("h3",{id:"rocketmq-clientproperties"},(0,o.kt)("inlineCode",{parentName:"h3"},"rocketmq-client.properties")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"rocketmq-client.properties")," file contains the properties of the Apache RocketMQ nameserver."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo vim rocketmq-client.properties\n")),(0,o.kt)("p",null,"Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-eventmesh/blob/1.3.0/eventmesh-runtime/conf/rocketmq-client.properties"},"default configuration file")," and change the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"eventMesh.server.rocketmq.namesrvAddr")," to the nameserver address of RocketMQ."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Configuration Key"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"eventMesh.server.rocketmq.namesrvAddr")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"127.0.0.1:9876;127.0.0.1:9876")),(0,o.kt)("td",{parentName:"tr",align:null},"The address of RocketMQ nameserver")))),(0,o.kt)("h2",{id:"run-and-manage-eventmesh-container"},"Run and Manage EventMesh Container"),(0,o.kt)("p",null,"Run an EventMesh container from the ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh/eventmesh")," image with the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker run")," command. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-p")," option of the command binds the container port with the host machine port. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-v")," option of the command mounts the configuration files from files in the host machine."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo docker run -d -p 10000:10000 -p 10105:10105 \\\n-v /data/eventmesh/rocketmq/conf/eventmesh.properties:/data/app/eventmesh/conf/eventmesh.properties \\\n-v /data/eventmesh/rocketmq/conf/rocketmq-client.properties:/data/app/eventmesh/conf/rocketmq-client.properties \\\neventmesh/eventmesh:v1.4.0\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker ps")," command lists the details (id, name, status, etc.) of the running containers. The container id is the unique identifier of the container."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ sudo docker ps\nCONTAINER ID     IMAGE                        COMMAND                  CREATED              STATUS              PORTS                                                                                          NAMES\n<container_id>   eventmesh/eventmesh:v1.4.0   "/bin/sh -c \'sh star\u2026"   About a minute ago   Up About a minute   0.0.0.0:10000->10000/tcp, :::10000->10000/tcp, 0.0.0.0:10105->10105/tcp, :::10105->10105/tcp   <container_name>\n')),(0,o.kt)("p",null,"To connect to the EventMesh container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo docker exec -it [container id or name] /bin/bash\n")),(0,o.kt)("p",null,"To read the log of the EventMesh container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"tail -f ../logs/eventmesh.out\n")),(0,o.kt)("p",null,"To stop or remove the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo docker stop [container id or name]\n\nsudo docker rm -f [container id or name]\n")))}d.isMDXComponent=!0}}]);